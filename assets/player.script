-- Player logic

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 250
-- gravity pulling the player down in pixel units
local gravity = -1900
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 800

local player_health = 5


-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local msg_trigger_response = hash("trigger_response")
local group_key = hash("key")
local group_book = hash("book")
local group_gem = hash("gem")
local group_obstacle = hash("ground")
local group_danger = hash("danger")
local group_enemy = hash("enemy_hit")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local input_attack = hash("attack")
local anim_walk = hash("run")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_attack = hash("attack")
local anim_die = hash("die")
local anim_hit = hash("hit")


function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")

	-- activate camera attached to the player collection
	-- this will send camera updates to the render script
	msg.post("camera", "acquire_camera_focus")

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- the currently playing animation
	self.anim = nil

	self.attacking = false
	self.hit = false
	self.dead = false

	self.player_health = 5

	self.key = false
	self.book = false
	self.gem = false
	self.pass_to_victory = true
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function hit(self)
	self.hit = false
end
local function dead(self)
	self.dead = false
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.hit then
			play_animation(self, anim_hit)
			timer.delay(0.6, false, hit)
		elseif self.dead then
			self.velocity.x = 0
			self.velocity.y = 0
			play_animation(self, anim_die)
			timer.delay(2, false, dead)
		elseif self.attacking then
			play_animation(self, anim_attack)	
		elseif self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
	self.attacking = false
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

local function handle_player_damage(self)
	local pos = go.get_position()
	pos = pos + (self.velocity * -1) / 10
	go.set_position(pos)
	self.player_health = self.player_health - 1
	self.hit = true
	-- print(self.player_health)
	
	if self.player_health <= 0 then
		inipos = vmath.vector3(109, 86, 1)
		go.set_position(inipos)
		self.player_health = 5
	end
end

local function items_to_victory(self)
	if self.key and self.book and self.gem then
		self.pass_to_victory = true
	end
end

local function all_to_victory(self)
	if self.pass_to_victory then
		print("YOU WIN !!!!")
		msg.post("/YouWin", "enable")
	end
	
end

function on_message(self, message_id, message, sender)

	if message_id == msg_trigger_response and sender.fragment == hash("hit") then
		if message.enter then
			if message.group == group_enemy then
				handle_player_damage(self)
			elseif message.group == group_danger then
				handle_player_damage(self)
			elseif message.group == group_key then
				print("Key adquired")
				self.key = true
				items_to_victory(self)
				all_to_victory(self)
			elseif message.group == group_book then
				print("Book adquired")
				self.book = true
				items_to_victory(self)
			elseif message.group == group_gem then
				print("Gem adquired")
				self.gem = true
				items_to_victory(self)
			end
		end
	end
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == group_enemy then
			-- print('hi')
			--handle_player_damage(self)
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		-- move slower in the air
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

local function attack(self)
	if self.ground_contact then
		self.attacking = true
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_attack then
		attack(self)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end